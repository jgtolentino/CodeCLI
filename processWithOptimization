/**
 * Simple test script to check if the optimization pipeline is enabled by default
 */

import readline from 'readline';

// Global variable to track if optimization is enabled
let optimizationEnabled = true;

// Create readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  prompt: '> '
});

// ANSI color codes
const colors = {
  reset: '\x1b[0m',
  gray: '\x1b[90m',
  purple: '\x1b[35m'
};

/**
 * Process with optimization pipeline
 */
async function processWithOptimization(input) {
  console.log(`${colors.gray}Processing through optimization pipeline...${colors.reset}`);
  
  // Simulate thinking with dots
  let dotCount = 0;
  const thinkingInterval = setInterval(() => {
    process.stdout.write('.');
    dotCount++;
    if (dotCount >= 3) {
      process.stdout.write('\n');
      dotCount = 0;
    }
  }, 300);
  
  try {
    // Simulate steps of the pipeline with delays
    await new Promise(resolve => setTimeout(resolve, 600));
    console.log(`\n${colors.gray}1. MCP filesystem server gathers relevant context${colors.reset}`);
    
    await new Promise(resolve => setTimeout(resolve, 800));
    console.log(`${colors.gray}2. Clod optimizes the prompt (90% token reduction)${colors.reset}`);
    
    await new Promise(resolve => setTimeout(resolve, 700));
    console.log(`${colors.gray}3. Optimized query sent to OpenAI API${colors.reset}`);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Clear thinking dots
    clearInterval(thinkingInterval);
    
    // Print simulated response
    console.log(`\n${colors.purple}Response:${colors.reset}`);
    console.log(`I'll process your request: "${input}"\n`);
    console.log(`This response used approximately 90% fewer tokens than a standard API call.`);
    console.log(`${colors.gray}Token usage: ~${Math.floor(Math.random() * 30) + 10} tokens${colors.reset}`);
    
  } catch (error) {
    // Clear thinking dots
    clearInterval(thinkingInterval);
    console.error(`\n${colors.red}Error in optimization pipeline: ${error.message}${colors.reset}`);
  }
}

/**
 * Process command
 */
function processCommand(input) {
  const command = input.trim();
  
  if (command === 'exit' || command === 'quit') {
    console.log('Goodbye!');
    rl.close();
    process.exit(0);
  } else if (command === 'check') {
    console.log(`Optimization pipeline is ${optimizationEnabled ? 'ENABLED' : 'DISABLED'}`);
  } else {
    // Process with optimization
    processWithOptimization(command);
  }
}

// Set up prompt
rl.prompt();

// Handle input
rl.on('line', (input) => {
  processCommand(input);
  rl.prompt();
}).on('close', () => {
  console.log('Exiting...');
  process.exit(0);
});

console.log('Test script running. Type anything to test the optimization pipeline.');
console.log('Type "check" to verify if optimization is enabled.');
console.log('Type "exit" or "quit" to exit.');
rl.prompt();